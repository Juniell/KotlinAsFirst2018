@file:Suppress("UNUSED_PARAMETER", "ConvertCallChainIntoSequence")

package lesson7.task1

import java.io.File
import java.lang.StringBuilder

/**
 * Пример
 *
 * Во входном файле с именем inputName содержится некоторый текст.
 * Вывести его в выходной файл с именем outputName, выровняв по левому краю,
 * чтобы длина каждой строки не превосходила lineLength.
 * Слова в слишком длинных строках следует переносить на следующую строку.
 * Слишком короткие строки следует дополнять словами из следующей строки.
 * Пустые строки во входном файле обозначают конец абзаца,
 * их следует сохранить и в выходном файле
 */
fun alignFile(inputName: String, lineLength: Int, outputName: String) {
    val outputStream = File(outputName).bufferedWriter()
    var currentLineLength = 0
    for (line in File(inputName).readLines()) {
        if (line.isEmpty()) {
            outputStream.newLine()
            if (currentLineLength > 0) {
                outputStream.newLine()
                currentLineLength = 0
            }
            continue
        }
        for (word in line.split(" ")) {
            if (currentLineLength > 0) {
                if (word.length + currentLineLength >= lineLength) {
                    outputStream.newLine()
                    currentLineLength = 0
                } else {
                    outputStream.write(" ")
                    currentLineLength++
                }
            }
            outputStream.write(word)
            currentLineLength += word.length
        }
    }
    outputStream.close()
}

/**
 * Средняя
 *
 * Во входном файле с именем inputName содержится некоторый текст.
 * На вход подаётся список строк substrings.
 * Вернуть ассоциативный массив с числом вхождений каждой из строк в текст.
 * Регистр букв игнорировать, то есть буквы е и Е считать одинаковыми.
 *
 */
fun countSubstrings(inputName: String, substrings: List<String>): Map<String, Int> {
    val map = mutableMapOf<String, Int>()
    val text = File(inputName).readText().toLowerCase()         // Строка со всем текстом входного файла
    for (element in substrings.toSet()) {                       // Проходим по всем элементам списка искомых строк
        var count = 0                                           // Счётчик количества вхождений элемента
        val lowered = element.toLowerCase()                     // Переводим элемент в нижний регистр
        var ind = 0                                             // Индекс, от которого мы будем искать новое вхождение
        var match = Regex(lowered).find(text, ind)              // Найденное вхождение
        while (match != null) {                                 // Пока элемнет есть в тексте,
            count++                                             // увеличиваем счётчик,
            ind = match.range.start + 1   // изменяем индекс поиска на индекс начала интервала первого найденого элемента
            match = Regex(lowered).find(text, ind)              // и ищем следующее вхождение уже с новым ind
        }
        map[element] = count                                    // Добавляем пару (элемент to кол-во вхождений) в мапу
    }
    return map
}


/**
 * Средняя
 *
 * В русском языке, как правило, после букв Ж, Ч, Ш, Щ пишется И, А, У, а не Ы, Я, Ю.
 * Во входном файле с именем inputName содержится некоторый текст на русском языке.
 * Проверить текст во входном файле на соблюдение данного правила и вывести в выходной
 * файл outputName текст с исправленными ошибками.
 *
 * Регистр заменённых букв следует сохранять.
 *
 * Исключения (жюри, брошюра, парашют) в рамках данного задания обрабатывать не нужно
 *
 */
fun sibilants(inputName: String, outputName: String) {
    val fixes = mapOf('Ы' to 'И', 'ы' to 'и', 'Я' to 'А', 'я' to 'а', 'Ю' to 'У', 'ю' to 'у')   // Мапа исправлений
    val letters = setOf('Ж', 'ж', 'Ч', 'ч', 'Ш', 'ш', 'Щ', 'щ')  // Множество возможных согласных
    val outputStream = File(outputName).bufferedWriter()
    for (line in File(inputName).readLines()) {                  // Проходим по всем строкам входного файла
        val str = line.toMutableList()                           // Переводим строку, которую будем изменять, в список
        for (i in 0 until str.size - 1) {
            if (str[i] in letters && str[i + 1] in fixes) {      // Если подряд идёт согласная из мно-ва и нужная гласная
                str[i + 1] = fixes[str[i + 1]]!!.toChar()        // Заменяем нужный символ на соответствующее ему исправление
            }
        }
        outputStream.write(str.joinToString(separator = ""))     // Записываем исправленную строку, преобразуя в нужный формат
        outputStream.newLine()                                   // Переходим на новую строку
    }
    outputStream.close()
}

/**
 * Средняя
 *
 * Во входном файле с именем inputName содержится некоторый текст (в том числе, и на русском языке).
 * Вывести его в выходной файл с именем outputName, выровняв по центру
 * относительно самой длинной строки.
 *
 * Выравнивание следует производить путём добавления пробелов в начало строки.
 *
 *
 * Следующие правила должны быть выполнены:
 * 1) Пробелы в начале и в конце всех строк не следует сохранять.
 * 2) В случае невозможности выравнивания строго по центру, строка должна быть сдвинута в ЛЕВУЮ сторону
 * 3) Пустые строки не являются особым случаем, их тоже следует выравнивать
 * 4) Число строк в выходном файле должно быть равно числу строк во входном (в т. ч. пустых)
 *
 */
fun centerFile(inputName: String, outputName: String) {
    val outputStream = File(outputName).bufferedWriter()
    val list = mutableListOf<String>()
    for (line in File(inputName).readLines())       // Записываем строки входного файла в список
        list.add(line.trim())
    if (list.isEmpty()) {                           // Если входной файл оказался пустым,
        outputStream.close()                        // то просто закрываем файл
    } else {
        val maxLength = list.maxBy { it.trim().length }!!.length    // Переменная с максимальной длиной строки в тексте
        for (i in 0 until list.size) {
            val size = (maxLength - list[i].length) / 2 + list[i].length   // Находим длину строки после добавления пробелов
            list[i] = list[i].padStart(size)                               // Добавляем проблелы, чтобы размер строки соответсовал size
            outputStream.write(list[i])
            outputStream.newLine()
        }
    }
    outputStream.close()
}

/**
 * Сложная
 *
 * Во входном файле с именем inputName содержится некоторый текст (в том числе, и на русском языке).
 * Вывести его в выходной файл с именем outputName, выровняв по левому и правому краю относительно
 * самой длинной строки.
 * Выравнивание производить, вставляя дополнительные пробелы между словами: равномерно по всей строке
 *
 * Слова внутри строки отделяются друг от друга одним или более пробелом.
 *
 * Следующие правила должны быть выполнены:
 * 1) Каждая строка входного и выходного файла не должна начинаться или заканчиваться пробелом.
 * 2) Пустые строки или строки из пробелов трансформируются в пустые строки без пробелов.
 * 3) Строки из одного слова выводятся без пробелов.
 * 4) Число строк в выходном файле должно быть равно числу строк во входном (в т. ч. пустых).
 *
 * Равномерность определяется следующими формальными правилами:
 * 5) Число пробелов между каждыми двумя парами соседних слов не должно отличаться более, чем на 1.
 * 6) Число пробелов между более левой парой соседних слов должно быть больше или равно числу пробелов
 *    между более правой парой соседних слов.
 *
 * Следует учесть, что входной файл может содержать последовательности из нескольких пробелов  между слвоами. Такие
 * последовательности следует учитывать при выравнивании и при необходимости избавляться от лишних пробелов.
 * Из этого следуют следующие правила:
 * 7) В самой длинной строке каждая пара соседних слов должна быть отделена В ТОЧНОСТИ одним пробелом
 * 8) Если входной файл удовлетворяет требованиям 1-7, то он должен быть в точности идентичен выходному файлу
 */
fun alignFileByWidth(inputName: String, outputName: String) {
    val outputStream = File(outputName).bufferedWriter()
    var max = 0
    var space = 0
    var sum = 0
    val list = mutableListOf<String>()
    for (line in File(inputName).readLines()) {                   // Проходим по всем строкам входного файла
        val str = Regex(""" +""").replace(line.trim(), " ")       // Убираем лишние пробелы из строк,
        list.add(str)                                             // добавляем их в список
        if (str.length > max)                                     // и находим максимальную длину строки
            max = str.length
    }
    for (line in list) {                                  // Проходим по каждой строке из списка
        var str: String
        val words = line.split(" ").toMutableList()       // Список слов в строке
        if (line.length == max || words.size < 2)         // Если длина строки равна максимальной, или в строке меньше 2-х слов,
            str = line                                    // то заносим в файл эту же строку
        else {
            val charLength = Regex(""" """).replace(line, "").length     // Длина строки без пробелов, т.е. кол-во букв в строке
            str = words[words.size - 1]                                  // добавляем в строку последнее слово
            for (i in words.size - 2 downTo 0) {
                sum += space                                             // Сумма уже добавленых пробелов в строку
                space = (max - charLength - sum) / (i + 1)               // Кол-во пробелов для этого слова
                str = words[i].padEnd(space + words[i].length) + str     // В начало строки записываем слово, добавляя к нему посчитанное кол-во пробелов
            }
        }
        sum = 0
        space = 0
        outputStream.write(str)
        outputStream.newLine()
    }
    outputStream.close()
}

/**
 * Средняя
 *
 * Во входном файле с именем inputName содержится некоторый текст (в том числе, и на русском языке).
 *
 * Вернуть ассоциативный массив, содержащий 20 наиболее часто встречающихся слов с их количеством.
 * Если в тексте менее 20 различных слов, вернуть все слова.
 *
 * Словом считается непрерывная последовательность из букв (кириллических,
 * либо латинских, без знаков препинания и цифр).
 * Цифры, пробелы, знаки препинания считаются разделителями слов:
 * Привет, привет42, привет!!! -привет?!
 * ^ В этой строчке слово привет встречается 4 раза.
 *
 * Регистр букв игнорировать, то есть буквы е и Е считать одинаковыми.
 * Ключи в ассоциативном массиве должны быть в нижнем регистре.
 *
 */
fun top20Words(inputName: String): Map<String, Int> {
    val map = mutableMapOf<String, Int>()
    val result = mutableMapOf<String, Int>()
    var text = File(inputName).readText().toLowerCase()
    text = Regex("""[^а-яА-ЯёЁa-zA-Z]|\s""").replace(text, " ").trim()       // Заменяем лишние символы на пробелы
    val words = Regex(""" +""").replace(text, " ").split(Regex("""\s"""))    // Разбиваем на слова по пробелам
    for (word in words)                                                      // Добавляем в map новые слова или
        map[word.toLowerCase()] = map.getOrDefault(word.toLowerCase(), 0) + 1            // увеличиваем длину списка уже имеющихся
    if (map.isEmpty() || text.isEmpty()) return result   // Если в исходном тексте не было слов, то возвращаем пустой result
    return map.map { it.key to it.value }.sortedByDescending { it.second }.take(20).toMap()
}

/**
 * Средняя
 *
 * Реализовать транслитерацию текста из входного файла в выходной файл посредством динамически задаваемых правил.

 * Во входном файле с именем inputName содержится некоторый текст (в том числе, и на русском языке).
 *
 * В ассоциативном массиве dictionary содержится словарь, в котором некоторым символам
 * ставится в соответствие строчка из символов, например
 * mapOf('з' to "zz", 'р' to "r", 'д' to "d", 'й' to "y", 'М' to "m", 'и' to "yy", '!' to "!!!")
 *
 * Необходимо вывести в итоговый файл с именем outputName
 * содержимое текста с заменой всех символов из словаря на соответствующие им строки.
 *
 * При этом регистр символов в словаре должен игнорироваться,
 * но при выводе символ в верхнем регистре отображается в строку, начинающуюся с символа в верхнем регистре.
 *
 * Пример.
 * Входной текст: Здравствуй, мир!
 *
 * заменяется на
 *
 * Выходной текст: Zzdrавствуy, mир!!!
 *
 * Пример 2.
 *
 * Входной текст: Здравствуй, мир!
 * Словарь: mapOf('з' to "zZ", 'р' to "r", 'д' to "d", 'й' to "y", 'М' to "m", 'и' to "YY", '!' to "!!!")
 *
 * заменяется на
 *
 * Выходной текст: Zzdrавствуy, mир!!!
 *
 * Обратите внимание: данная функция не имеет возвращаемого значения
 */
fun transliterate(inputName: String, dictionary: Map<Char, String>, outputName: String) {
    TODO()
}

/**
 * Средняя
 *
 * Во входном файле с именем inputName имеется словарь с одним словом в каждой строчке.
 * Выбрать из данного словаря наиболее длинное слово,
 * в котором все буквы разные, например: Неряшливость, Четырёхдюймовка.
 * Вывести его в выходной файл с именем outputName.
 * Если во входном файле имеется несколько слов с одинаковой длиной, в которых все буквы разные,
 * в выходной файл следует вывести их все через запятую.
 * Регистр букв игнорировать, то есть буквы е и Е считать одинаковыми.
 *
 * Пример входного файла:
 * Карминовый
 * Боязливый
 * Некрасивый
 * Остроумный
 * БелогЛазый
 * ФиолетОвый

 * Соответствующий выходной файл:
 * Карминовый, Некрасивый
 *
 * Обратите внимание: данная функция не имеет возвращаемого значения
 */
fun chooseLongestChaoticWord(inputName: String, outputName: String) {
    val outputStream = File(outputName).bufferedWriter()
    val list = mutableListOf<String>()                  // Список, куда будем заносить слова с разными буквами
    var max = 0
    for (line in File(inputName).readLines()) {         // Проходим по всем строкам входного файла
        val char = line.toLowerCase().toSet()           // Множество всех букв слова
        if (char.size == line.length) {                 // Если кол-во символов в мно-ве равно длине слову, то буквы не повторяются,
            list.add(line)                              // поэтому заносим это слово в список
            if (line.length >= max) max = line.length   // и ищем максимальную длину среди них
        }
    }
    // Фильтруем слова по длине (она должна быть равна max), переводим в строку, добавляя запятые и пробелы между словами,
    // и записываем в выходной файл
    outputStream.write(list.filter { it.length == max }.joinToString(separator = ", "))
    outputStream.close()
}

/**
 * Сложная
 *
 * Реализовать транслитерацию текста в заданном формате разметки в формат разметки HTML.
 *
 * Во входном файле с именем inputName содержится текст, содержащий в себе элементы текстовой разметки следующих типов:
 * - *текст в курсивном начертании* -- курсив
 * - **текст в полужирном начертании** -- полужирный
 * - ~~зачёркнутый текст~~ -- зачёркивание
 *
 * Следует вывести в выходной файл этот же текст в формате HTML:
 * - <i>текст в курсивном начертании</i>
 * - <b>текст в полужирном начертании</b>
 * - <s>зачёркнутый текст</s>
 *
 * Кроме того, все абзацы исходного текста, отделённые друг от друга пустыми строками, следует обернуть в теги <p>...</p>,
 * а весь текст целиком в теги <html><body>...</body></html>.
 *
 * Все остальные части исходного текста должны остаться неизменными с точностью до наборов пробелов и переносов строк.
 * Отдельно следует заметить, что открывающая последовательность из трёх звёздочек (***) должна трактоваться как "<b><i>"
 * и никак иначе.
 *
 * Пример входного файла:
Lorem ipsum *dolor sit amet*, consectetur **adipiscing** elit.
Vestibulum lobortis, ~~Est vehicula rutrum *suscipit*~~, ipsum ~~lib~~ero *placerat **tortor***,

Suspendisse ~~et elit in enim tempus iaculis~~.
 *
 * Соответствующий выходной файл:
<html>
<body>
<p>
Lorem ipsum <i>dolor sit amet</i>, consectetur <b>adipiscing</b> elit.
Vestibulum lobortis. <s>Est vehicula rutrum <i>suscipit</i></s>, ipsum <s>lib</s>ero <i>placerat <b>tortor</b></i>.
</p>
<p>
Suspendisse <s>et elit in enim tempus iaculis</s>.
</p>
</body>
</html>
 *
 * (Отступы и переносы строк в примере добавлены для наглядности, при решении задачи их реализовывать не обязательно)
 */

fun markdownToHtmlSimple(inputName: String, outputName: String) {
    val outputStream = File(outputName).bufferedWriter()
    val list = mutableListOf<String>()              // Список строк входного файла
    // Создаём счётчики, чтобы отслеживать <p> и </p>, <b> и </b>, <i> и </i> и <s> и </s> соответственно
    var count = 0
    var count1 = 0
    var count2 = 0
    var count3 = 0
    for (line in File(inputName).readLines()) {
        list.add(line)
        count1 += Regex("""[^*]\*\*[^*]|\*\*\*""").findAll(line, 0).toList().size           // Кол-во ** и ***
        count2 += Regex("""[^*]\*[^*]|\*\*\*""").findAll(line, 0).toList().size             // Кол-во * и ***
        count3 += Regex("""~~""").findAll(line, 0).toList().size
    }
    // Если есть символ без пары (их кол-во нечётное), то при делении на 2 и последующем умножении на 2 нечётность пропадёт,
    // что позволит нам не изменять последний символ (который не будет иметь пары)
    count1 = count1 / 2 * 2
    count2 = count2 / 2 * 2
    count3 = count3 / 2 * 2
    outputStream.write("<html>")                        // Добавляем теги начала
    outputStream.write("<body>")
    outputStream.write("<p>")
    loop@ for (line in list) {                          // Проходим по всем строкам
        outputStream.newLine()
        if (line.isEmpty() && count % 2 == 0) {         // Если строка пустая и встречается чётное кол-во раз,
            outputStream.write("</p>")
            outputStream.write("<p>")                   // то добавляем тег, открывающий новый абзац,
            count++                                     // прибавляем к счётчику
            outputStream.newLine()
            continue@loop                               // и рассматриваем следующую строку
        }
        if (line.isEmpty() && count % 2 == 1) {         // Если строка пустая и встречается нечётное кол-во раз,
            outputStream.write("</p>")                  // то добавляем тег, закрывающий абзац,
            count++                                     // прибавляем к счётчику
            outputStream.newLine()
            continue@loop                               // и рассматриваем следующую строку
        }
        var str = line
        while (Regex("""\*|~~""") in str) {     // Если же строка не была пустой, то пока в ней содержатся * или ~.
            // Если кол-во каких-либо искомых символов было нечётным, то при последнем попадании на этот символ
            // соответствующий ему count будет равен 0, из-за чего он не заменится
            if (Regex("""\*\*""") in str && count1 % 2 == 0 && count1 != 0) {     // заменяем символы
                str = Regex("""\*\*""").replaceFirst(str, "<b>")                  // на соответствующие им теги
                count1--                                                          // в разметке HTML,
            }                                                                     // уменьшая счётчики
            if (Regex("""\*\*""") in str && count1 % 2 == 1 && count1 != 0) {
                str = Regex("""\*\*""").replaceFirst(str, "</b>")
                count1--
            }
            if (Regex("""\*""") in str && count2 % 2 == 0 && count2 != 0) {
                str = Regex("""\*""").replaceFirst(str, "<i>")
                count2--
            }
            if (Regex("""\*""") in str && count2 % 2 == 1 && count2 != 0) {
                str = Regex("""\*""").replaceFirst(str, "</i>")
                count2--
            }
            if (Regex("""~~""") in str && count3 % 2 == 0 && count3 != 0) {
                str = Regex("""~~""").replaceFirst(str, "<s>")
                count3--
            }
            if (Regex("""~~""") in str && count3 % 2 == 1 && count3 != 0) {
                str = Regex("""~~""").replaceFirst(str, "</s>")
                count3--
            }
        }
        outputStream.write(str)         // Записываем в выходной файл получившуюся строку
    }
    outputStream.write("</p>")          // Добавляем теги конца файла
    outputStream.write("</body>")
    outputStream.write("</html>")
    outputStream.close()
}

/**
 * Сложная
 *
 * Реализовать транслитерацию текста в заданном формате разметки в формат разметки HTML.
 *
 * Во входном файле с именем inputName содержится текст, содержащий в себе набор вложенных друг в друга списков.
 * Списки бывают двух типов: нумерованные и ненумерованные.
 *
 * Каждый элемент ненумерованного списка начинается с новой строки и символа '*', каждый элемент нумерованного списка --
 * с новой строки, числа и точки. Каждый элемент вложенного списка начинается с отступа из пробелов, на 4 пробела большего,
 * чем список-родитель. Максимально глубина вложенности списков может достигать 6. "Верхние" списки файла начинются
 * прямо с начала строки.
 *
 * Следует вывести этот же текст в выходной файл в формате HTML:
 * Нумерованный список:
 * <ol>
 *     <li>Раз</li>
 *     <li>Два</li>
 *     <li>Три</li>
 * </ol>
 *
 * Ненумерованный список:
 * <ul>
 *     <li>Раз</li>
 *     <li>Два</li>
 *     <li>Три</li>
 * </ul>
 *
 * Кроме того, весь текст целиком следует обернуть в теги <html><body>...</body></html>
 *
 * Все остальные части исходного текста должны остаться неизменными с точностью до наборов пробелов и переносов строк.
 *
 * Пример входного файла:
///////////////////////////////начало файла/////////////////////////////////////////////////////////////////////////////
 * Утка по-пекински
 * Утка
 * Соус
 * Салат Оливье
1. Мясо
 * Или колбаса
2. Майонез
3. Картофель
4. Что-то там ещё
 * Помидоры
 * Фрукты
1. Бананы
23. Яблоки
1. Красные
2. Зелёные
///////////////////////////////конец файла//////////////////////////////////////////////////////////////////////////////
 *
 *
 * Соответствующий выходной файл:
///////////////////////////////начало файла/////////////////////////////////////////////////////////////////////////////
<html>
<body>
<ul>
<li>
Утка по-пекински
<ul>
<li>Утка</li>
<li>Соус</li>
</ul>
</li>
<li>
Салат Оливье
<ol>
<li>Мясо
<ul>
<li>
Или колбаса
</li>
</ul>
</li>
<li>Майонез</li>
<li>Картофель</li>
<li>Что-то там ещё</li>
</ol>
</li>
<li>Помидоры</li>
<li>
Яблоки
<ol>
<li>Красные</li>
<li>Зелёные</li>
</ol>
</li>
</ul>
</body>
</html>
///////////////////////////////конец файла//////////////////////////////////////////////////////////////////////////////
 * (Отступы и переносы строк в примере добавлены для наглядности, при решении задачи их реализовывать не обязательно)
 */
fun markdownToHtmlLists(inputName: String, outputName: String) {
    TODO()
}

/**
 * Очень сложная
 *
 * Реализовать преобразования из двух предыдущих задач одновременно над одним и тем же файлом.
 * Следует помнить, что:
 * - Списки, отделённые друг от друга пустой строкой, являются разными и должны оказаться в разных параграфах выходного файла.
 *
 */
fun markdownToHtml(inputName: String, outputName: String) {
    TODO()
}

/**
 * Средняя
 *
 * Вывести в выходной файл процесс умножения столбиком числа lhv (> 0) на число rhv (> 0).
 *
 * Пример (для lhv == 19935, rhv == 111):
19935
 *    111
--------
19935
+ 19935
+19935
--------
2212785
 * Используемые пробелы, отступы и дефисы должны в точности соответствовать примеру.
 * Нули в множителе обрабатывать так же, как и остальные цифры:
235
 *  10
-----
0
+235
-----
2350
 *
 */
fun printMultiplicationProcess(lhv: Int, rhv: Int, outputName: String) {
    TODO()
}


/**
 * Сложная
 *
 * Вывести в выходной файл процесс деления столбиком числа lhv (> 0) на число rhv (> 0).
 *
 * Пример (для lhv == 19935, rhv == 22):
19935 | 22
-198     906
----
13
-0
--
135
-132
----
3

 * Используемые пробелы, отступы и дефисы должны в точности соответствовать примеру.
 *
 */
fun printDivisionProcess(lhv: Int, rhv: Int, outputName: String) {
    TODO()
}

